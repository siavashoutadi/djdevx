#!/bin/bash
set -eo pipefail

script_dir=$(dirname "$(readlink -f "$0")")


function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

function generate_manual {
    uv run typer djdevx.main utils docs --output manual.md --name djdevx
}

function step_version {
    pyproject_file="pyproject.toml"
    version_line=$(grep -E '^version\s*=' "$pyproject_file")
    current_version=$(echo "$version_line" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

    if [[ -z "$current_version" ]]; then
        echo "Version not found in pyproject.toml."
        exit 1
    fi

    IFS='.' read -r MAJOR MINOR PATCH <<<"$current_version"
    MINOR=$((MINOR + 1))
    new_version="$MAJOR.$MINOR.$PATCH"

    sed -i "s/$current_version/$new_version/" "$pyproject_file"
    sed -i "s/$current_version/$new_version/" "./djdevx/__init__.py"

    echo "Version updated to $new_version"

}

function scaffold_package {
    name=$1

    if [ -z "$name" ]; then
        echo "Usage: $0 scaffold_package PACKAG_NAME"
        exit 1
    fi

    to_underscore() {
        echo "$1" | tr '-' '_'
    }

    package_dir="$script_dir/djdevx/packages"
    template_dir="$script_dir/djdevx/templates/$name"
    package_url_dir="$template_dir/urls/packages"
    package_settings_dir="$template_dir/settings/packages"
    package_file="$package_dir/$(to_underscore ${name}).py"
    package_url_file="$package_url_dir/$(to_underscore ${name}).py"
    package_settings_file="$package_settings_dir/$(to_underscore ${name}).py"

    mkdir -p $package_dir $template_dir $package_url_dir $package_settings_dir

    cat > $package_file << EOL
import subprocess
import typer

from pathlib import Path

from ..utils.print_console import print_step, print_success
from ..utils.project_info import has_dependency
from ..utils.project_files import (
    copy_template_files,
    is_project_exists_or_raise,
    get_project_path,
    get_packages_url_path,
    get_packages_settings_path,
)

app = typer.Typer(no_args_is_help=True)


@app.command()
def install():
    """
    Install and configure ${name}
    """
    is_project_exists_or_raise()

    print_step("Installing ${name} package ...")
    subprocess.check_call(["uv", "add", "${name}"])

    current_dir = Path(__file__).resolve().parent
    source_dir = current_dir.parent / "templates" / "${name}"
    project_dir = get_project_path()

    copy_template_files(
        source_dir=source_dir, dest_dir=project_dir, template_context={}
    )

    print_success("${name} is installed successfully.")


@app.command()
def remove():
    """
    Remove ${name} package
    """
    print_step("Removing ${name} package ...")
    if has_dependency("${name}"):
        subprocess.check_call(["uv", "remove", "${name}"])

    url_path = Path.joinpath(get_packages_url_path(), "$(to_underscore ${name}).py")
    url_path.unlink(missing_ok=True)

    settings_url = Path.joinpath(get_packages_settings_path(), "$(to_underscore ${name}).py")
    settings_url.unlink(missing_ok=True)

    print_success("${name} is removed successfully.")
EOL

    cat > $package_url_file << EOL
from django.urls import include, path


urlpatterns = [path("", include("$(to_underscore ${name}).urls"))]

EOL

    cat > $package_settings_file << EOL
from settings import INSTALLED_APPS


INSTALLED_APPS += [
    "$(to_underscore ${name})",
]

EOL

}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}
